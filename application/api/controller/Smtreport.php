<?php
namespace app\api\controller;

use \app\mobile\controller\MobileHome;
use \app\api\query\DeviceReport;
use \think\Config;
use app\api\model\member as MemberModel;
use app\api\model\seller as SellerModel;
use app\api\model\store as StoreModel;
use app\api\model\storejoinin as StorejoininModel;
use app\api\model\member_permission as MemPermissionModel;
use app\api\model\t_permission_group as TpermissionGroupModel;
use app\api\model\t_permission as TpermissionModel;

class Smtreport extends MobileHome
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function get_gateways()
    {
        $msectime       = get_millisecond(); // 开始运行毫秒数
        $user_id        = "18603027764"; // 当前用户 TODO: 设置为登录的当前用户
        $report         = new DeviceReport();
        $result         = $report->get_gateways($user_id);
        api_return([
            "gateway_list"   => $result,
            "runtime"         => get_millisecond()-$msectime
        ], 0, "OK");
    }

    public function get_devices()
    {
        $msectime       = get_millisecond(); // 开始运行毫秒数
        $user_id        = "18603027764"; // 当前用户 TODO: 设置为登录的当前用户
        $report         = new DeviceReport();
        $result         = $report->get_devices($user_id);
        api_return([
            "device_list"   => $result,
            "runtime"       => get_millisecond()-$msectime
        ], 0, "OK");
    }

    public function get_tasks()
    {
        $msectime       = get_millisecond(); // 开始运行毫秒数
        $user_id        = "18603027764"; // 当前用户 TODO: 设置为登录的当前用户

        $page           = input("page");
        if ($page == NULL) {
            $page = 0;
        }
        $start_time     = input("start_time");
        $end_time       = input("end_time");

        $report         = new DeviceReport();
        $result         = $report->get_tasks($user_id, $page, $start_time, $end_time);
        // TODO: 返回给前端task的总量？
        api_return([
            "task_list"   => $result,
            "page_number" => $page,
            "runtime"     => get_millisecond()-$msectime
        ], 0, "OK");
    }

    /*
     * 获取用户的统计总数
     * user_id, 用户的id
     * start_time, 查询的开始时间
     * end_time, 查询的结束时间
     * gateway_id, 网关id, 若为空则查询所有网关
     * device_sub_id, 设备子id, 若为空则查询网关下的所有设备. 如果gateway_id为空, 则该参数会被忽略
     * task_id, 任务id, 若gateway_id和device_sub_id都为空，则该参数会被忽略
     * 注：板载数和电路数的统计量，和gateway_id、device_sub_id、task_id都没有直接关联，这些数据只和生产线相关
     */
    public function get_smt_count() {
        $msectime       = get_millisecond(); // 开始运行毫秒数

        $user_id        = "18603027764"; // 当前用户 TODO: 设置为登录的当前用户
        $start_time     = input("start_time");
        $end_time       = input("end_time");
        $gateway_id     = input("gateway_id");
        $device_sub_id  = input("device_sub_id");
        $task_id        = input("task_id");

        if ($start_time == NULL || $end_time == NULL) {
            api_return([], 1, "未指定参数start_time或end_time");
        }

        $report         = new DeviceReport();
        $result        = $report->get_count($user_id, $start_time, $end_time, $gateway_id, $device_sub_id, $task_id);

        if (Config::get("FAKE_DATA")) {
            $coeff = Config::get("FAKE_DATA_COEFFICIENT");
            api_return([
                "smt_count"       => $result["smt_count"] * $coeff,
                "device_smt_count" => $result["deivce_smt_count"],
                "task_smt_count" => $result["task_smt_count"],
                "base_boardcount" => $result["base_boardcount"] * $coeff,
                "device_base_boardcount" => $result["device_base_boardcount"],
                "task_base_boardcount" => $result["task_base_boardcount"],
                "boardcount"      => $result["boardcount"] * $coeff,
                "device_boardcount"      => $result["device_boardcount"],
                "task_boardcount"      => $result["task_boardcount"],
                "runtime"         => get_millisecond()-$msectime
            ], 0, "OK");
        }
        else {
            api_return($result, 0, "OK");
        }
    }

    /*
     * 获取用户的统计总数
     * user_id, 用户的id
     * start_time, 查询的开始时间
     * end_time, 查询的结束时间
     * gateway_id, 网关id, 若为空则查询所有网关
     * device_sub_id, 设备子id, 若为空则查询网关下的所有设备. 如果gateway_id为空, 则该参数会被忽略
     * task_id, 任务id, 若gateway_id和device_sub_id都为空，则该参数会被忽略
     */
    public function get_smt_histogram() {
        $msectime       = get_millisecond(); // 开始运行毫秒数

        $user_id        = "18603027764"; // 当前用户 TODO: 设置为登录的当前用户
        $start_time     = input("start_time");
        $end_time       = input("end_time");
        $gateway_id     = input("gateway_id");
        $device_sub_id  = input("device_sub_id");
        $task_id        = input("task_id");

        if ($start_time == NULL || $end_time == NULL) {
            api_return([], 1, "未指定参数start_time或end_time");
        }

        $report         = new DeviceReport();
        $result         = $report->get_smt_histogram($user_id, $start_time, $end_time, $gateway_id, $device_sub_id, $task_id);

        api_return([
            "smt_data"       => $result,
            "runtime"         => get_millisecond()-$msectime
        ], 0, "OK");
    }

    /*
     * 获取用户每条产线的有效运行时间
     * user_id, 用户的id
     * start_time, 查询的开始时间
     * end_time, 查询的结束时间
     */
    public function get_effective_time() {
        $msectime       = get_millisecond(); // 开始运行毫秒数

        $user_id        = "18603027764"; // 当前用户 TODO: 设置为登录的当前用户
        $start_time     = input("start_time");
        $end_time       = input("end_time");

        if ($start_time == NULL || $end_time == NULL) {
            api_return([], 1, "未指定参数start_time或end_time");
        }

        $report         = new DeviceReport();
        $result        = $report->get_effective_time($user_id, $start_time, $end_time);

        api_return([
            "effective_time"       => $result,
            "runtime"         => get_millisecond()-$msectime
        ], 0, "OK");
    }
    public function get_user_infomation()
    {
        //创建数据模型实例
        
        $mem_model = new MemberModel();
        $seller_model = new SellerModel();
        $store_model = new StoreModel();
        $Storejoinin_model = new StorejoininModel();
        $memPermission_model = new MemPermissionModel();
        $permissionG_model = new TpermissionGroupModel();
        $permission_model = new TpermissionModel();
        
        // $permission_res = $permission_model::with('t_permission_group')->select();

        $memPermission_res = $permission_model -> select();
        // $mem_model_res = $mem_model ->where('member_name','gssmt') ->find();
        // $seller_model_res = $seller_model -> find(1);
        // $store_model_res = $store_model -> select();
        // $Storejoinin_model_res = $Storejoinin_model -> select();

        // $tmres = $tm -> where('id',1)->find();
        // $user_res = $user_model -> where('f_owner_id',0)->limit(10)->select();
        // $user_res = $user_model -> where('f_id','>',5)->count();
        dump($memPermission_res);
    }
}