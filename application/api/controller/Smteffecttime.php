<?php

namespace app\api\controller;

use \think\Db;
use \app\mobile\controller\MobileHome;

class Smteffecttime extends MobileHome
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function get_teaminfo($user_id = '18603027764')
    {
        $whereAnd = [];
        $whereAnd[] = "f_username='{$user_id}'";
        $uteaminfo = Db::table("ds_t_user")
            ->field("f_teaminfo teaminfo")
            ->where(join($whereAnd, " AND "))
            ->select();
        $tname = [];
        foreach ($uteaminfo as $row) {
            $de_json = json_decode($row['teaminfo'], TRUE);//json数组转换为php格式的数组
            $count_json = count($de_json); //个数为定义的数组中的元素的个数
            for ($i = 0; $i < $count_json; $i++) {
                $tname[] = $de_json[$i]['teamname'];
            }
        }
        return $tname;
    }

    //参数为分组名称，返回结果为：此分组中网关的ID
    public function get_grouping_gwid($user_id, $stmline)
    {
        $whereAnd = [];
        $whereAnd[] = "f_user1_name='{$user_id}'";
        $whereAnd[] = "f_user1_teamname='{$stmline}'";

        $gw_id = Db::table("ds_t_user_relationship")
            ->field("f_user2_name gw_id")
            ->where(join($whereAnd, " AND "))
            ->select();
        return $gw_id;
    }


    //参数为分组名称，返回结果为：此分组中网关的ID
    public function get_gateway_by_uer_id($user_id)
    {
        $whereAnd = [];
        $whereAnd[] = "f_user1_name='{$user_id}'";
        $gw_id = Db::table("ds_t_user_relationship")
            ->field("f_user2_name gw_id")
            ->where(join($whereAnd, " AND "))
            ->select();
        return $gw_id;
    }


    //参数为网关ID，返回结果为：此网关下面的设备ID
    public function get_device_id($gw_id)
    {
        $whereAnd = [];
        //$whereAnd[] = "f_user1_name='{$user_id}'";
        $whereAnd[] = "f_gw_id='{$gw_id}'";
        $device_info = Db::table("ds_t_gw_bind_device")
            ->field("f_gw_id as gw_id, f_device_id as dev_id")
            ->where(join($whereAnd, " AND "))
            ->select();
        return $device_info;
    }

    //参数为网关ID，返回结果为：此网关下面的设备ID
    public function get_device_id_by_gwid_and_groupname($gw_id, $group_name)
    {
        $whereAnd = [];
        $whereAnd[] = "f_group_name='{$group_name}'";
        $whereAnd[] = "f_gw_id='{$gw_id}'";
        $device_info = Db::table("ds_t_gw_bind_device")
            ->field("f_gw_id as gw_id, f_device_id as dev_id")
            ->where(join($whereAnd, " AND "))
            ->select();
        return $device_info;
    }

    /*
    输入：网关ID和设备ID,
    输出：此设备下面的个任务的统计信息
    */
    public function get_every_device_effective_time($gw_id, $dev_id, $linename)
    {
        //; // 当前用户
        $start_time = strtotime(date("Y-m-d", time())); // 今天开始时间戳
        $end_time = time(); // 结束时间戳
        $device_id = ""; //设备ID 如果为空则统计所有设备
        $today_smtcount = 0; // 当天SMT总点数
        $today_base_boardcount = 0; // 当天生产基板数量总数
        $today_boardcount = 0; // 当天生产的基板电路数
        $today_effective_time = 0; //此设备今天的所有任务加起来的有效时间
        $msectime = get_millisecond(); // 开始运行毫秒数

        $task_list = [];
        $task_name = [];
        $whereAnd = [];
        {

            $whereAnd[] = "f_gw_id='{$gw_id}'"; //
            $whereAnd[] = "f_deviceid='{$dev_id}'";
            //$whereAnd[] = "f_start_time > 0";
            $whereAnd[] = "f_create_time BETWEEN {$start_time} AND {$end_time}";
            $res_task = Db::table("ds_t_device_data")
                ->alias("D")//B.task_name,
                ->field("D.f_create_time,D.f_gw_id,D.f_start_time,
						MIN(D.f_smt_count) AS smt_min,MAX(D.f_smt_count) AS smt_max,
						MIN(D.f_base_boardcount) AS board_min,MAX(D.f_base_boardcount) AS board_max,
						MIN(D.f_effective_time) AS effective_min,MAX(D.f_effective_time) AS effective_max,


						MIN(D.f_boardcount) AS boardcount_min,MAX(D.f_boardcount) AS boardcount_max,
						D.f_task_id")
                ->where(join($whereAnd, " AND "))
                ->group("D.f_task_id,D.f_start_time")
                ->select();


            foreach ($res_task as $row_task) {

                //贴片数量
                $current_smtcount = $row_task["smt_max"] - $row_task["smt_min"];
                $today_smtcount += $current_smtcount;

                //基板数量
                $current_base_boardcount = $row_task["board_max"] - $row_task["board_min"];
                $today_base_boardcount += $current_base_boardcount;

                //基板电路数量
                $current_today_boardcount = $row_task["boardcount_max"] - $row_task["boardcount_min"];
                $today_boardcount += $current_today_boardcount;

                //任务的有效时间
                $current_effective_time = $row_task["effective_max"] - $row_task["effective_min"];
                $today_effective_time += $current_effective_time;


                $key = "task_id_" . $row_task["f_task_id"];

                $whereAnd = [];
                $re_id = $row_task["f_task_id"];
                $whereAnd[] = "f_id=$re_id";
                $whereAnd[] = "f_device_id=$dev_id";

                $res_task_name = Db::table("ds_t_task_name")
                    ->field("f_id,f_gw_id,f_task_name,f_device_id")
                    ->where(join($whereAnd, " AND "))
                    ->find();


                //  echo($res_task_name["f_task_name"]." ".$row_task["f_gw_id"]);
                //  echo("<br>");

                if (isset($task_list[$key])) {

                    $task_list[$key]["base_boardcount"] += $current_base_boardcount;
                    $task_list[$key]["boardcount"] += $current_base_boardcount;
                    $task_list[$key]["smt_count"] += $current_smtcount;
                    $task_list[$key]["effective_time"] += $current_effective_time;

                } else {
                    $task_list[$key] = [
                        "task_id" => $row_task["f_task_id"],
                        "base_boardcount" => $current_base_boardcount,    //基板电路数量
                        "boardcount" => $current_base_boardcount,    //基板电路数量
                        "smt_count" => $current_smtcount,           //贴片数量
                        "effective_time" => $current_effective_time,      //任务的有效时间
                        "task_name" => $res_task_name["f_task_name"],
                    ];
                }
            }
        }
        $all = [
            //"line_name"           => $linename,

            "gw_id" => $gw_id,
            "dev_id" => $dev_id,

            "today_base_boardcount" => $today_base_boardcount, //总数
            "today_boardcount" => $today_boardcount, //总数
            "today_smtcount" => $today_smtcount,        //总数
            "today_effective_time" => $today_effective_time,  //总数
            "runtime" => get_millisecond() - $msectime,
            "task" => $task_list
        ];
        return $all;
        //api_return($all, 0, "OK");
    }


    //参数为分组名称，返回结果为：此分组下每一个设备的有效时间.
    /*
       输入：用户ID，产线名称，开始和结束时间
       输出：今天此用户各产线下的各设备的运行的有效时间以及各个任务的运行有效时间
			//http://zdd.cn/api/smteffecttime/get_today_effective_time
			//http://zdd.cn/api/smteffecttime/get_today_effective_time/user_id/18603027764/line_name/产线3/start_time/1545321600/end_time/1545408000
    */

    public function get_every_line_effective($user_id, $stmline)
    {

        $gw_id = Smteffecttime::get_gateway_by_uer_id($user_id);
        $gwcount = count($gw_id); //个数为定义的数组中的元素的个数
        $json_data = [];
        for ($m = 0; $m < $gwcount; $m++) {
            $gateway_id = $gw_id[$m]['gw_id'];
            $dev_info = Smteffecttime::get_device_id_by_gwid_and_groupname($gateway_id, $stmline);
            $dev_count = count($dev_info); //个数为定义的数组中的元素的个数
            for ($n = 0; $n < $dev_count; $n++) {
                $gateway_id = $dev_info[$n]['gw_id'];
                $dev_id = $dev_info[$n]['dev_id'];
                //echo 'count = '.$dev_count.' gateway_id'. $gateway_id.' '.$dev_id;
                //print_r("<br>");
                $json_data[] = Smteffecttime::get_every_device_effective_time($gateway_id, $dev_id, $stmline);
            }
        }
        return $json_data;
    }


    /*
       输入：用户ID，产线名称，开始和结束时间
       输出：今天此用户各产线下的各设备的运行的有效时间以及各个任务的运行有效时间
			//http://zdd.cn/api/smteffecttime/get_today_effective_time
			//http://zdd.cn/api/smteffecttime/get_today_effective_time/user_id/18603027764/line_name/产线3/start_time/1545321600/end_time/1545408000
    */
    public function get_today_effective_time()
    {
        //; // 当前用户
        $start_time = strtotime(date("Y-m-d", time())); // 今天开始时间戳
        // echo "$start_time";

        $end_time = time(); // 结束时间戳
        $device_id = ""; //设备ID 如果为空则统计所有设备
        $today_smtcount = 0;                 // 当天SMT总点数
        $today_base_boardcount = 0;          // 当天生产基板数量总数
        $msectime = get_millisecond(); // 开始运行毫秒数
        $user_id = "18603027764";
        $line_name = '产线3';

        $user_id = input("user_id"); // 当前用户 TODO: 设置为登录的当前用户
        $line_name = input("line_name"); // 当前用户 TODO: 设置为登录的当前用户
        if (strcmp($user_id, "") == 0) {
            $user_id = "18603027764";
        }
        //$start_time     = input("start_time");
        //$end_time       = input("end_time");

        // 查找当前用户名下所有设备
        $whereAnd = [];
        $whereAnd[] = "f_user1_name='{$user_id}'";
        if ($device_id != "") {
            // $whereAnd[] = "device_id='{$device_id}'";
        }

        // 循环设备读取数据
        $data_list = [];
        $res_teamname = Smteffecttime::get_teaminfo($user_id);
        $count_json = count($res_teamname); //个数为定义的数组中的元素的个数
        $linedata = [];
        $dataarray = [];
        for ($i = 0; $i < $count_json; $i++) {
            $tname = $res_teamname[$i];
            if ($line_name != "") {
                if (strcmp($line_name, $tname) == 0) {
                    $linedata[$i] = Smteffecttime::get_every_line_effective($user_id, $tname);
                    break;
                }
            } else {
                $linedata[$i] = Smteffecttime::get_every_line_effective($user_id, $tname);
            }

            $data_list[$i] = [
                "stmline" => $tname,
                "linedata" => $linedata[$i]
            ];
        }
        api_return([
            "data" => $data_list,
            "runtime" => get_millisecond() - $msectime
        ], 0, "OK");

        return;
    }

    /*
	    此接口统计的是从给定的时间向后获取N个点，这个N个点的单位有：分钟，小时，天，月，年。
	    输入：网关ID，设备子ID，点数count，mode:(1,2,3,4,5)，开始时间
    */
    public function get_every_details($gw_id, $dev_id, $mode, $count, $start_time)
    {
        /*
                      $gw_id='zdd-2018112205';
                      $dev_id =  1;//设备ID 如果为空则统计所有设备
                      $start_time;
                      $count=24;
                      $mode =2;
                      $start_time     = time();//strtotime(date("Y-m-d", time())); // 今天开始时间戳
                      $end_time       = time(); // 结束时间戳

                    $datestring = date("Y-m-d H::");
                    $start_time = strtotime($datestring);
                    print_r($start_time);
                */
        $today_smtcount = 0; // 当天SMT总点数
        $today_base_boardcount = 0; // 当天生产基板数量总数

        $msectime = get_millisecond(); // 开始运行毫秒数
        $seconds = 3600;   //表示一个小时3600S
        $start_t = $start_time;
        $task_list[] = [];


        if ($mode == 1) //分钟(1,2,3,4,5)
        {
            $steps = 60;
        } else if ($mode == 2)//小时
        {
            $steps = 3600;
        } else if ($mode == 3)//天
        {
            $steps = 3600 * 24;
        } else if ($mode == 4)//月
        {
            $steps = 3600 * 30;
        }
        $start_t = $start_time;

        for ($i = 0; $i < $count; $i++) //
        {
            //
            $end_time = $start_t - $steps;
            //print_r("start=".$start_t."end_time=".$end_time);
            //	print_r("<br>");
            //计算此时间段内的数据
            $task_name = [];
            $whereAnd = [];
            {
                $whereAnd[] = "f_gw_id='{$gw_id}'"; //
                $whereAnd[] = "f_deviceid='{$dev_id}'";
                //$whereAnd[] = "f_start_time > 0";
                $whereAnd[] = "f_create_time BETWEEN {$end_time} AND {$start_t}";
                $res_task = Db::table("ds_t_device_data")
                    ->alias("D")//B.task_name,
                    ->field("D.f_create_time,D.f_gw_id,D.f_start_time,MIN(D.f_smt_count) AS smt_min,MAX(D.f_smt_count) AS smt_max,MIN(D.f_base_boardcount) AS board_min,MAX(D.f_base_boardcount) AS board_max,MIN(D.f_effective_time) AS effective_min,MAX(D.f_effective_time) AS effective_max,D.f_task_id")
                    ->where(join($whereAnd, " AND "))
                    ->group("D.f_task_id,D.f_start_time")
                    ->select();

                $today_effective_time = 0; //此设备今天的所有任务加起来的有效时间
                $current_effective_time = 0;
                foreach ($res_task as $row_task) {
                    $current_effective_time = $row_task["effective_max"] - $row_task["effective_min"];
                    $today_effective_time += $current_effective_time;
                }
                $key = $i;
                $task_list[$key] = [
                    "id" => $i,
                    "time" => $start_t,
                    "effective_time" => $today_effective_time,
                ];
            }
            $start_t = $end_time;
        }
        $all = [
            "gw_id" => $gw_id,
            "dev_id" => $dev_id,
            "mode" => $mode,
            "count" => $count,
            "start_time" => $start_time,
            "runtime" => get_millisecond() - $msectime,
            "task" => $task_list
        ];
        api_return($all, 0, "OK");
    }

    /*
    此接口统计的是从给定的时间向后获取N个点，这个N个点的单位有：分钟，小时，天，月，年。
    输入：设备ID，开始时间，点数count，mode:(1,2,3,4,5)
    */
    public function get_test()
    {
        $gw_id = 'zdd-2018112205';
        $dev_id = 1;//设备ID 如果为空则统计所有设备
        $start_time;
        $mode = 2;
        $count = 24;
        $start_time = time();//  strtotime(date("Y-m-d", time())); // 今天开始时间戳
        $end_time = time(); // 结束时间戳
        Smteffecttime::get_every_details($gw_id, $dev_id, $mode, $count, $start_time);
    }

    /*
    1: 对任务进行分组，知道在今天00点开始的任务个数
    2：之后获取此任务的最大和最小的ID
    3：根据获取到的最大最小基板数据获取对于的创建时间
    4：将此数据上报给前端
    */


    public function get_task_start_stop_time_point($gw_id, $dev_id, $linename)
    {
        //; // 当前用户
        $start_time = strtotime(date("Y-m-d", time())); // 今天开始时间戳
        $end_time = time(); // 结束时间戳
        $device_id = ""; //设备ID 如果为空则统计所有设备
        $today_smtcount = 0; // 当天SMT总点数
        $today_base_boardcount = 0; // 当天生产基板数量总数
        $today_boardcount = 0; // 当天生产的基板电路数
        $today_effective_time = 0; //此设备今天的所有任务加起来的有效时间
        $msectime = get_millisecond(); // 开始运行毫秒数

        $task_time_list = [];
        $task_name = [];
        $whereAnd = [];
        {

            $whereAnd[] = "f_gw_id='{$gw_id}'"; //
            $whereAnd[] = "f_deviceid='{$dev_id}'";
            //$whereAnd[] = "f_start_time > 0";
            $whereAnd[] = "f_create_time BETWEEN {$start_time} AND {$end_time}";
            $res_task = Db::table("ds_t_device_data")
                ->alias("D")//B.task_name,
                ->field("D.f_task_id")
                ->where(join($whereAnd, " AND "))
                ->group("D.f_task_id")
                ->select();

            foreach ($res_task as $row_task) {

                $find_task_id = $row_task["f_task_id"];
                //echo 'find_task_id = '.$find_task_id.' gw_id'. $gw_id.' '.$dev_id;
                //print_r("<br>");

                $whereAnd = [];
                $whereAnd[] = "f_gw_id='{$gw_id}'"; //
                $whereAnd[] = "f_deviceid='{$dev_id}'";
                $whereAnd[] = "f_task_id='{$find_task_id}'";
                $whereAnd[] = "f_create_time BETWEEN {$start_time} AND {$end_time}";
                $res_start = Db::table("ds_t_device_data")
                    ->alias("D")//B.task_name,
                    ->field("MIN(D.f_id) AS f_id_min")//D.f_create_time,D.f_id,D.f_gw_id,
                    ->where(join($whereAnd, " AND "))
                    ->select();

                $whereAnd = [];
                $whereAnd[] = "f_gw_id='{$gw_id}'"; //
                $whereAnd[] = "f_deviceid='{$dev_id}'";
                $whereAnd[] = "f_task_id='{$find_task_id}'";
                //$whereAnd[] = "f_start_time > 0";
                $whereAnd[] = "f_create_time BETWEEN {$start_time} AND {$end_time}";
                $res_end = Db::table("ds_t_device_data")
                    ->alias("D")//B.task_name,
                    ->field("MAX(D.f_id) AS f_id_max")//D.f_create_time,D.f_gw_id,D.f_task_id,
                    ->where(join($whereAnd, " AND "))
                    ->select();


                $find_min_f_id = $res_start[0]['f_id_min'];
                $whereAnd = [];
                $whereAnd[] = "f_id='{$find_min_f_id}'";
                $res_start = Db::table("ds_t_device_data")
                    ->alias("D")//B.task_name,
                    ->field("D.f_create_time as start_time")
                    ->where(join($whereAnd, " AND "))
                    ->find();


                $find_max_f_id = $res_end[0]['f_id_max'];
                $whereAnd = [];
                $whereAnd[] = "f_id='{$find_max_f_id}'";
                $res_end = Db::table("ds_t_device_data")
                    ->alias("D")//B.task_name,
                    ->field("D.f_create_time as stop_time")
                    ->where(join($whereAnd, " AND "))
                    ->find();

                $task_time_list[$find_task_id] = [
                    "task_id" => $find_task_id,
                    "start_time" => $res_start["start_time"],
                    "stopt_time" => $res_end["stop_time"],
                ];
            }
        }
        $all = [
            "line_name" => $linename,
            "gw_id" => $gw_id,
            "dev_id" => $dev_id,
            "linename" => $linename,
            "task" => $task_time_list
        ];
        return $all;
        //api_return($all, 0, "OK");
    }


    public function get_task_start_stop_time($user_id, $stmline)
    {
        $json_data = [];
        $gw_id = Smteffecttime::get_gateway_by_uer_id($user_id);
        $gwcount = count($gw_id); //个数为定义的数组中的元素的个数
        for ($m = 0; $m < $gwcount; $m++) {
            $gateway_id = $gw_id[$m]['gw_id'];
            $dev_info = Smteffecttime::get_device_id_by_gwid_and_groupname($gateway_id, $stmline);
            $dev_count = count($dev_info); //个数为定义的数组中的元素的个数
            for ($n = 0; $n < $dev_count; $n++) {
                $gateway_id = $dev_info[$n]['gw_id'];
                $dev_id = $dev_info[$n]['dev_id'];
                $json_data[] = Smteffecttime::get_task_start_stop_time_point($gateway_id, $dev_id, $stmline);
            }
        }
        return $json_data;
    }

    public function get_task_test()
    {
        $user_id = '18603027764';
        $data_list = [];
        $msectime = get_millisecond(); // 开始运行毫秒数
        $res_teamname = Smteffecttime::get_teaminfo($user_id);
        $gw_id = Smteffecttime::get_gateway_by_uer_id($user_id);
        $count_json = count($res_teamname); //个数为定义的数组中的元素的个数
        $linedata = [];
        $dataarray = [];
        $json_data = [];
        for ($i = 0; $i < $count_json; $i++) {
            $stmline = $res_teamname[$i];
            $linedata[$i] = Smteffecttime::get_task_start_stop_time($user_id, $stmline);
            $data_list[$i] = [
                "stmline" => $stmline,
                "linedata" => $linedata[$i]
            ];
        }
        $all = [
            "stmline" => $stmline,
            "runtime" => get_millisecond() - $msectime,
            "task" => $data_list
        ];
        api_return($all, 0, "OK");
        return $json_data;
    }
}
